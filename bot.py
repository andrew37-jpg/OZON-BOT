import asyncio
import logging
import os
import random
import sqlite3
from itertools import islice

import aiohttp
import pymorphy2
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TELEGRAM_BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN", "")
NOTIFICATION_CHANNEL_ID: str = os.getenv("NOTIFICATION_CHANNEL_ID", "")
OZON_API_URL: str = "https://api-seller.ozon.ru"
OZON_TOKEN: str = os.getenv("OZON_TOKEN", "")
CLIENT_ID: str = os.getenv("CLIENT_ID", "")
CHECK_INTERVAL: int = int(os.getenv("CHECK_INTERVAL", 300))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º, —á—Ç–æ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∑–∞–¥–∞–Ω—ã
if not all([TELEGRAM_BOT_TOKEN, NOTIFICATION_CHANNEL_ID, OZON_TOKEN, CLIENT_ID]):
    raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ TELEGRAM_BOT_TOKEN, NOTIFICATION_CHANNEL_ID, OZON_TOKEN –∏ CLIENT_ID!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot: Bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp: Dispatcher = Dispatcher()
router: Router = Router()  # –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä


async def get_product_info_from_card(sku: int, session: aiohttp.ClientSession) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ Ozon API –ø–æ SKU.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ /v3/product/info/list –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    Args:
        sku (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ Ozon.
        session (aiohttp.ClientSession): –°–µ—Å—Å–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤.

    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ. –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.
    """
    if not sku:
        logging.warning("SKU –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")
        return {}

    # –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö
    url = f"{OZON_API_URL}/v3/product/info/list"
    headers = {
        "Client-Id": CLIENT_ID,
        "Api-Key": OZON_TOKEN,
        "Content-Type": "application/json",
    }
    payload = {"sku": [int(sku)]}  # –í —Ç–µ–ª–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ SKU

    try:
        async with session.post(url, json=payload, headers=headers) as response:
            logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ Ozon API: —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ {response.status}")
            result = await response.json()

            if response.status == 200 and "items" in result and len(result["items"]) > 0:
                return result["items"][0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ SKU {sku}: {result}")
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ozon API –¥–ª—è SKU {sku}: {e}")

    return {}


async def get_product_name_and_brand_by_sku(sku: int, session: aiohttp.ClientSession) -> tuple[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏ –±—Ä–µ–Ω–¥–µ –ø–æ SKU —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Ozon API."""
    product_info = await get_product_info_from_card(sku, session)
    product_name = product_info.get("name", "")
    brand_name = product_info.get("brand", "").strip()

    if not brand_name:
        brand_name = "Guten Morgen"

    return product_name, brand_name

def get_brand_name(brand: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
    brand = brand.strip().lower()

    if "|" in brand:
        brand_name = brand.split("|")[0].strip()
    elif "/" in brand:
        brand_name = brand.split("/")[0].strip()
    else:
        brand_name = brand

    brand_mapping = {
        "diana store": "Diana Store",
        "guten morgen": "Guten Morgen",
        "ooo guten morgen": "Guten Morgen",
        "dianastore": "Diana Store",
    }

    for key in brand_mapping:
        if brand_name.startswith(key):
            return brand_mapping[key]

    return "Guten Morgen"

def init_db() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü."""
    if os.path.exists("ozon_reviews.db"):
        os.remove("ozon_reviews.db")

    conn = sqlite3.connect("ozon_reviews.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS processed_reviews (
            review_id TEXT PRIMARY KEY,
            sku TEXT,
            product_name TEXT,
            user_name TEXT,
            review_text TEXT,
            rating INTEGER,
            response_text TEXT,
            comment_id TEXT,
            processed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def save_review_to_db(review_id: str, sku: str, product_name: str, user_name: str, review_text: str, rating: int, response_text: str, comment_id: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect("ozon_reviews.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO processed_reviews (review_id, sku, product_name, user_name, review_text, rating, response_text, comment_id)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, (review_id, sku, product_name, user_name, review_text, rating, response_text, comment_id))
    conn.commit()
    conn.close()

def is_review_processed(review_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ –æ—Ç–∑—ã–≤ —Ä–∞–Ω–µ–µ."""
    conn = sqlite3.connect("ozon_reviews.db")
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM processed_reviews WHERE review_id = ?", (review_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

async def get_unprocessed_reviews(session: aiohttp.ClientSession) -> list:
    url = f"{OZON_API_URL}/v1/review/list"
    headers = {
        "Client-Id": CLIENT_ID,
        "Api-Key": OZON_TOKEN,
        "Content-Type": "application/json",
    }
    payload = {"limit": 50, "sort_dir": "ASC", "status": "UNPROCESSED"}

    try:
        async with session.post(url, json=payload, headers=headers) as response:
            logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
            result = await response.json()
            logging.info(f"–û—Ç–≤–µ—Ç API: {result}")
            if response.status == 200:
                return result.get("reviews", [])
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–∑—ã–≤–æ–≤: {result}")
                return []
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API: {e}")
        return []

async def post_comment(review_id: str, text: str, session: aiohttp.ClientSession) -> str:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ Ozon API."""
    url = f"{OZON_API_URL}/v1/review/comment/create"
    headers = {
        "Client-Id": CLIENT_ID,
        "Api-Key": OZON_TOKEN,
        "Content-Type": "application/json",
    }
    payload = {"mark_review_as_processed": True, "review_id": review_id, "text": text}

    try:
        async with session.post(url, json=payload, headers=headers) as response:
            result = await response.json()
            if response.status == 200:
                return result.get("comment_id", "")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {result}")
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
    return ""

async def notify_channel(sku: int, response_text: str, rating: int, product_name: str, user_name: str, review_text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."""
    user_name = user_name if user_name else "–ê–Ω–æ–Ω–∏–º"

    def determine_brand(product_name: str) -> str:
        product_name_lower = product_name.lower() if product_name else ""
        if "diana" in product_name_lower:
            return "Diana"
        elif "guten morgen" in product_name_lower:
            return "Guten Morgen"
        elif "gm" in product_name_lower:
            return "Guten Morgen"
        else:
            return "Unknown"

    brand_name = determine_brand(product_name)
    if brand_name == "Unknown":
        brand_name = "Guten Morgen"

    if brand_name == "Diana":
        product_url = f"https://www.ozon.ru/product/polotentse-mahrovoe-diana-1-sht-50h90-visdom-hlopok-100-450-g-m2-{sku}/?at=PjtJn4mrrcpDJKlxi71M2m3Ux8Y9MYc7"
    elif brand_name == "Guten Morgen":
        product_url = f"https://www.ozon.ru/product/polotentse-mahrovoe-guten-morgen-1-sht-50h90-visdom-hlopok-100-450-g-m2-{sku}/?at=PjtJn4mrrcpDJKlxi71M2m3Ux8Y9MYc7"
    else:
        product_url = f"https://www.ozon.ru/product/unknown-brand-{sku}/?at=PjtJn4mrrcpDJKlxi71M2m3Ux8Y9MYc7"

    response_text = generate_response(rating, brand_name, product_name)

    review_message = (
        f"–ë—Ä–µ–Ω–¥: {brand_name}\n"
        f"‚≠êÔ∏è{'‚≠êÔ∏è' * (rating - 1)}\n"
        f"–ê—Ä—Ç–∏–∫—É–ª Ozon: {sku} (<a href='{product_url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞</a>)\n"
        f"–¢–æ–≤–∞—Ä: {product_name}\n\n"
        f"üí¨ {user_name}\n{review_text}\n\n"
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç:\n{response_text}"
    )

    try:
        await bot.send_message(NOTIFICATION_CHANNEL_ID, review_message, parse_mode="HTML")
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª Telegram: {NOTIFICATION_CHANNEL_ID}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

def generate_response(rating: int, brand_name: str, product_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."""
    morph = pymorphy2.MorphAnalyzer()

    first_word = product_name.split()[0] if product_name else "–ø—Ä–æ–¥—É–∫—Ç"
    first_word_parsed = morph.parse(first_word)[0]
    first_word_genitive = first_word_parsed.inflect({'gent'}).word if first_word_parsed.inflect({'gent'}) else "–ø—Ä–æ–¥—É–∫—Ü–∏–∏"

    our_word_parsed = morph.parse("–Ω–∞—à–µ–π")[0]
    gender = first_word_parsed.tag.gender if first_word_parsed.tag.gender else 'neut'
    our_word_genitive = our_word_parsed.inflect({gender}).word if our_word_parsed.inflect({gender}) else "–Ω–∞—à–µ–π"

    responses = {
        5: [
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É {our_word_genitive} {first_word_genitive}! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à —Ç–æ–≤–∞—Ä. –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}.",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É {our_word_genitive} {first_word_genitive}! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ä–∞–≤–¥–∞–ª –í–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è. –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}.",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É {our_word_genitive} {first_word_genitive}! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à —Ç–æ–≤–∞—Ä. –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}."
        ],
        4: [
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –æ—Ü–µ–Ω–∫—É {our_word_genitive} {first_word_genitive}! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Ç–æ–≤–∞—Ä –í–∞–º –ø–æ–¥–æ—à–µ–ª. –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}.",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ —Ö–æ—Ä–æ—à—É—é –æ—Ü–µ–Ω–∫—É {our_word_genitive} {first_word_genitive}! –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å –í–∞–º —Å –≤—ã–±–æ—Ä–æ–º –≤ –±—É–¥—É—â–µ–º. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}.",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {our_word_genitive} {first_word_genitive}! –ï—Å–ª–∏ –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±—É–¥–µ–º —Ä–∞–¥—ã –∏—Ö —É—Å–ª—ã—à–∞—Ç—å. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}."
        ],
        3: [
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –æ—Ü–µ–Ω–∫—É {our_word_genitive} {first_word_genitive}! –ù–∞–º –≤–∞–∂–Ω–æ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ, –∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏—è–º–∏. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}.",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Ü–µ–Ω–∫—É {our_word_genitive} {first_word_genitive}! –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –±—É–¥—É—â–µ–º. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}.",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –æ—Ü–µ–Ω–∫—É {our_word_genitive} {first_word_genitive}! –ú—ã —Ü–µ–Ω–∏–º –í–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –±—É–¥–µ–º —É—á–∏—Ç—ã–≤–∞—Ç—å –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}."
        ],
        2: [
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Ü–µ–Ω–∫—É {our_word_genitive} {first_word_genitive}! –ù–∞–º –∂–∞–ª—å, —á—Ç–æ —Ç–æ–≤–∞—Ä –í–∞–º –Ω–µ –ø–æ–¥–æ—à–µ–ª, –º—ã –ø—Ä–∏–º–µ–º –º–µ—Ä—ã. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}.",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {our_word_genitive} {first_word_genitive}. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}.",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ —Å {our_word_genitive} {first_word_genitive}! –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}."
        ],
        1: [
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –í–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å {our_word_genitive} {first_word_genitive}. –ú—ã –ø—Ä–∏–º–µ–º –≤—Å–µ –º–µ—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}.",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–π –æ–ø—ã—Ç —Å {our_word_genitive} {first_word_genitive}. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –í–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}.",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ–ø—ã—Ç —Å {our_word_genitive} {first_word_genitive}. –ú—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±—Ä–µ–Ω–¥ {brand_name} –≤ —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ {brand_name}."
        ]
    }
    return random.choice(responses.get(rating, ["–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –æ—Ü–µ–Ω–∫—É!"]))

async def handle_reviews(session: aiohttp.ClientSession) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤."""
    logging.info("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...")
    reviews = await get_unprocessed_reviews(session)
    if not reviews:
        logging.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")
        return

    for review in islice(reviews, 5):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤—ã—Ö 5 –æ—Ç–∑—ã–≤–æ–≤
        review_id = review.get("id")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ—Ç–∑—ã–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if is_review_processed(review_id):
            logging.info(f"–û—Ç–∑—ã–≤ {review_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        review_text = review.get("text", "–û—Ç–∑—ã–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        rating = review.get("rating", 0) or 1
        sku = review.get("sku")
        product_name = review.get("product_name")

        # –ü–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥ –∏–∑ API, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –æ—Ç–∑—ã–≤–µ
        if not product_name and sku:
            product_name, brand_name = await get_product_name_and_brand_by_sku(sku, session)
        else:
            brand_name = review.get("brand", "Guten Morgen")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–µ–Ω–¥, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ –æ—Ç–∑—ã–≤–µ.

        if not product_name:
            logging.warning(f"–¢–æ–≤–∞—Ä –¥–ª—è SKU {sku} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–∑—ã–≤–∞ ID {review_id}.")
            continue

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        response_text = generate_response(rating, brand_name, product_name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        comment_id = await post_comment(review_id, response_text, session)
        if comment_id:
            logging.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞ ID: {review_id}")
            await notify_channel(sku, response_text, rating, product_name, '–ê–Ω–æ–Ω–∏–º', review_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            save_review_to_db(review_id, str(sku), product_name, '–ê–Ω–æ–Ω–∏–º', review_text, int(rating), response_text, str(comment_id))
        else:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–∑—ã–≤–∞ ID: {review_id}")


@router.message(Command(commands=["start", "help"]))
async def send_welcome(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help."""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤—ã Ozon.")
async def scheduled_task(session: aiohttp.ClientSession) -> None:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 5 –æ—Ç–∑—ã–≤–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)."""
    while True:
        try:
            await handle_reviews(session)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        await asyncio.sleep(CHECK_INTERVAL)

async def main() -> None:
    init_db()
    async with aiohttp.ClientSession() as session:
        dp.include_router(router)
        asyncio.create_task(scheduled_task(session))
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



